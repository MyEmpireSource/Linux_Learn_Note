http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000


ssh-keygen -t rsa -C "mymvyuncount@mymvyuncount.com"

git config --global user.name "51_Vb75437n"

git config --global user.email "mvyuncount@163.com"

让Git显示颜色，会让命令输出看起来更醒目：
git config --global color.ui true


git init 

git add [file .... file]

用命令git commit告诉Git，把文件提交到仓库：
git commit -m "some notes"

掌握工作区的状态
git status

查看修改内容
git diff
git diff [version] -- [file]
#test.txt文件当前对比最新版本
git diff HEAD -- test.txt
#test.txt文件当前对比4578lk版本
git diff 4578lk -- test.txt

显示从最近到最远的提交日志
git log
git log [--pretty=oneline]

查看命令历史
git reflog

回退到上一个版本
git reset --hard [version]
#回退到当前上一个版本[HEAD^]
git reset --hard HEAD^ 
#回退到当前上3个版本
git reset --hard HEAD~3
#回退到版本ad34234
git reset --hard ad34234


把暂存区的修改状态撤销掉（unstage），重新放回工作区
git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本
git reset HEAD [filename]

把文件在工作区的修改全部撤销
这里有两种情况：
一种是file自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是file已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
git checkout -- [filename]

版本库中删除该文件，那就用命令git rm删掉，并且git commit：
git rm [fileName]


git remote add [name] git@github.com:[github_count_name]/repositoryName.git
git remote add origin git@github.com:MyEmpireSource/MyTest.git

本地库的内容推送到远程
git push
程库是空的，我们第一次推送master分支时，加上了-u参数
git push -u origin master
以后提交 
git push origin master

要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；


创建分支
git branch [branch_name]
切换分支
git checkout [branch_name]

创建并切换分支
git checkout -b [branch_name]

git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
创建dev分支
git checkout -b dev

查看当前分支：
git branch

合并分支
git merge [branch_name]
分支合并默认是 Fast forward

如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit
--no-ff参数，表示禁用Fast forward
git merge --no-ff -m "message info" [branch_name]

查看分支合并情况
git log --graph --abbrev-commit
git log --graph --pretty=oneline --abbrev-commit

删除分支
git branch -d [branch_name]


把当前工作现场“储藏”起来，等以后恢复现场后继续工作
git stash
查看工作现场
git stash list

还原工作现场，两种方法
一是用git stash apply恢复，
但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
git stash apply [stash_name]
git stash drop [stash_name]

另一种方式是用git stash pop，恢复的同时把stash内容也删了：
git stash pop [stash_name]


查看远程库的信息
git remote
更详细的信息
git remote -v


创建远程origin的dev分支到本地，用这个命令创建本地dev分支
git checkout -b dev orifin/dev

设置本地和远程的分支链接
git branch --set-upstream [local_branch_name] [remote-branch_name]
设置dev和origin/dev的分支链接
git branch --set-upstream dev origin/dev


多人协作的工作模式通常是这样：

首先，可以试图用git push origin branch-name推送自己的修改；

如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

如果合并有冲突，则解决冲突，并在本地提交；

没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！

如果git pull提示“no tracking information”，
则说明本地分支和远程分支的链接关系没有创建，
用命令
git branch --set-upstream [local-branch-name] [remote-branch-name]


打标签
git tag [tag_name] [version_id]
给d48e39e版本加标签
git tag v0.9 d48e39e
创建带有说明的标签
git tag -a [tag_name] -m "[tag discription]" [version_id]
git tag -a v0.9 -m "version 0.1 released" d48e39e
用PGP签名标签
git tag -s [tagname] -m "blablabla..."
打一个新标签给最新的版本
git tag [tag_name]
查看所有标签
git tag

删除标签
git tag -d [tag_name]

查看标签信息
git show [tag_name]
git show v1.0

推送某个标签到远程，使用命令
git push [remote_name] [tagname]
git push origin v1.0

一次性推送全部尚未推送到远程的本地标签：
git push [remote_name] --tags
git push origin --tags

标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：
git tag -d [tag_name]
然后，从远程删除
git push [remote_name] :refs/tags/[tag_name]
git push origin :refs/tags/v0.9


忽略某些文件时，需要编写.gitignore；

.gitignore文件本身要放到版本库里，
并且可以对.gitignore做版本管理

GitHub已经为我们准备了各种配置文件
https://github.com/github/gitignore

git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
